CKEDITOR.plugins.add( 'mentions', {
    requires: 'widget',
    // Register the icons. They must match command names.
    icons: 'mentions',
    toolbar: 'styles',
    // The plugin initialization logic goes inside this method.
    init: function( editor ) {
        editor.fc_mentions_forbid_undo = false;

        editor.on('instanceReady', function() {
            CKEDITOR.scriptLoader.load(CKEDITOR.getUrl(CKEDITOR.plugins.getPath('mentions') + 'js/fuse.min.js'));
        });

        editor.widgets.add( 'fc_mention',
            {
                template: '<span class="fc_mention fc_mention_temp" data-mtype="user" data-id=""></span>',
                inline: true,
                mask:true,
                upcast: function( element ) {
                    return element.name == 'span' && element.hasClass( 'fc_mention' );
                },
                downcast: function( el ) {
                    if(typeof this.data.user !== 'undefined') {
                        var space = this.data.user.fullname.indexOf(" ");
                        $(el).data('id', this.data.user.user_id);
                        if (this.data.user.fullname.trim() != '') {
                            if(space === -1) {
                                el.setHtml(this.data.user.fullname);
                            } else {
                                el.setHtml(this.data.user.fullname.substring(0, space+2) + '.');
                            }
                        } else {
                            el.setHtml(this.data.user.email);
                        }
                    }
                },
                allowedContent:true,
                draggable:false,
                data: function() {
                    if(typeof this.data.user !== 'undefined') {
                        var space = this.data.user.fullname.indexOf(" ");
                        $(this.element.$).attr('data-id', this.data.user.user_id);
                        if (this.data.user.fullname.trim() != '') {
                            if(space === -1) {
                                this.element.setHtml(this.data.user.fullname);
                            } else {
                                this.element.setHtml(this.data.user.fullname.substring(0, space+2) + '.');
                            }
                        } else {
                            this.element.setText(this.data.user.email);
                        }

                        if (!editor.document.getById(this.data.bookmark.startNode)) {
                            return;
                        }

                        var selection = editor.getSelection();
                        if(selection) {
                            var range = selection.getRanges()[0];
                            if(typeof range != 'undefined' && typeof this.data.bookmark != 'undefined') {
                                range.moveToBookmark(this.data.bookmark);
                                range.select();
                                editor.fc_mentions_forbid_undo = true;
                            }
                        }
                    }
                },
            });
        editor.widgets.add( 'mentions',
            {
                template: '<div class="mentions"><div class="mentions-username"></div><ul class="drpdwn"></ul></div>',
                inline: true,
                editables:
                {
                    username:
                    {
                        selector: '.mentions-username',
                        allowedContent: 'strong em'
                    }
                },
                allowedContent: 'div(!mentions); div(!mentions-username)',
                requiredContent: 'div(mentions)',
                draggable:false,
                upcast: function( element ) {
                    return element.name == 'div' && element.hasClass( 'mentions' );
                },
                button: 'Click to mention someone',
                init: function( data ) {
                    var widgetMentions = this;
                    this.on('focus', function () {
                        var usernameEl = this.editables.username;
                        widgetMentions.firstInited = true;
                        setTimeout(function () {
                            $(usernameEl.$).html("@");
                            var new_range = editor.createRange();
                            new_range.moveToElementEditEnd(usernameEl);
                            editor.getSelection().selectRanges( [ new_range ] );
                            if(usernameEl.$.innerText == '\n') {
                                usernameEl.focus();
                            }
                            usernameEl.focus(true);
                        }, 200);

                        var observer = new MutationObserver(function(mutations) {
                            mutations.forEach(function(mutation) {
                                if (mutation.attributeName === "class") {
                                    var needRemove = false;
                                    if($(mutation.target).hasClass('cke_widget_editable')) {
                                        needRemove = !$(mutation.target).hasClass('cke_widget_editable_focused');
                                    }
                                    if($(mutation.target).hasClass('cke_widget_wrapper')) {
                                        needRemove = !$(mutation.target).hasClass('cke_widget_wrapper_focused');
                                    }
                                    if(needRemove) {
                                        setTimeout(function () {
                                            var text = $(mutation.target).text();
                                            if(text != "") {
                                                if($(editor.document.$).find('.mentions-username').length) {
                                                    destroyWidget(editor, text);
                                                }
                                            }
                                        }, 200)
                                    }
                                }
                            });
                        });
                        observer.observe($(usernameEl.$)[0],  {
                            attributes: true
                        });
                        $(usernameEl.$).parent().on('focus', '.mentions-username', function() {
                            var $this = $(this);
                            $this.data('before', $this.html());
                            return $this;
                        });
                        $(usernameEl.$).parent().on('blur keyup paste', '.mentions-username', function() {
                            var $this = $(this);
                            if ($this.data('before') !== $this.html()) {
                                $this.data('before', $this.html());
                                $this.trigger('change');
                            }
                            return $this;
                        });

                        $(usernameEl.$).parent().on('change', '.mentions-username', function() {
                            var dropdown = $(widgetMentions.element.$).find('ul');
                            var term = $(this).text();
                            var editor_height = $(editor.document.$).height();
                            var editor_width = $(editor.document.$).width();
                            var BOTTOM_EDGE_MARGIN = 20;
                            if(!term.length) {
                                destroyWidget(editor, '&#8203;');
                                return;
                            }
                            if(term.indexOf('@') === -1) {
                                destroyWidget(editor, term);
                                return;
                            }
                            if(/\s/g.test($(this).text())) {
                                destroyWidget(editor, term);
                                return;
                            }

                            widgetMentions.firstInited = false;

                            term = term.replace('@','');
                            term = term.trim();
                            if(term === "") {
                                dropdown.hide();
                                dropdown.find('a').removeHighlight();
                                return;
                            }
                            search(term).then(function(names) {
                                if(!names.length) {
                                    dropdown.hide();
                                    return;
                                }
                                dropdown.html('');
                                $.each(names, function (i, user) {
                                    var li = $('<li></li>');
                                    var a = $('<a href="#">' + '<img src="' + user.avatar_url + '">'
                                        + user.fullname + '<br>' + user.email + '</a>');

                                    li.on('mouseenter', function(e) {
                                        dropdown.find('.focused').removeClass('focused');
                                        $(e.currentTarget).addClass('focused');
                                    });

                                    a.mousedown(function () {
                                        $(usernameEl.$).html('&#8203;');
                                        editor.execCommand('fc_mention', {
                                            startupData: {
                                                user: user,
                                                bookmark: widgetMentions.data.bookmark
                                            }
                                        });
                                    }).data('user', user).data('bookmark', widgetMentions.data.bookmark);
                                    if(i == 0) {
                                        li.addClass('focused');
                                    }
                                    a.highlight(term);
                                    dropdown.append(li.append(a));
                                });
                                dropdown.show();
                                var caret_top_offset = getCaretPosition(editor, 'y') + BOTTOM_EDGE_MARGIN;
                                var caret_left_offset = getCaretPosition(editor, 'x');
                                var dropdown_height = dropdown.height();
                                var dropdown_width = dropdown.width();

                                if(editor_height - caret_top_offset < dropdown_height) {
                                    editor.resize( '100%', editor_height + (dropdown_height - (editor_height - caret_top_offset)), true );
                                }
                                if(editor_width - caret_left_offset < dropdown_width) {
                                    dropdown.css('left', '-'+dropdown_width+'px');
                                }
                            });

                        });
                    });

                }
            });

        function destroyWidget(editor, text) {
            $(editor.document.$).find('.mentions-username').each(function () {
                $(this).closest('.cke_widget_wrapper').remove();
            });
            editor.fire( 'unlockSnapshot' );
            if(typeof text !== "undefined") {
                editor.insertHtml(text);
            }
        }

        function getCaretPosition(editor, axis) {
            var sel = editor.getSelection(), // text selection
                obj = sel.getStartElement().$, // the element the selected text resides in
                range = editor.getSelection().getRanges(), // range of selection
                container = range[0].startContainer.$, // get the DOM node of the selected text, probably a textnode
                textlen = typeof obj.textContent === "undefined" ? obj.innerText.length : obj.textContent.length, // get the length of the text in the container
                offset = range[0].startOffset; // get the offset from the beginning of the text in the container to the caret
            if(container.nodeType === 3) { // if the container is a text node
                while (container.previousSibling) { // add the length of all the preceding text nodes and elements in the same parent element
                    container = container.previousSibling;
                    if (container.length) {
                        offset += container.length; // this is for text nodes
                    } else {
                        offset += container.textContent ? container.textContent.length : container.innerText.length; // this is for HTML elements
                    }
                }
            }
            var pct = textlen > 0 ? offset / textlen : 0; // the percentage of the caret position
            var cursor;
            if(axis == 'x') {
                cursor = Math.floor(obj.offsetWidth * pct); // multiply elem width by percentage of carets position for caret's offset in pixels
                while (obj.offsetParent) { // add all the offsets of all of its parents to get the complete offset of the caret from document origin
                    cursor += obj.offsetLeft;
                    obj = obj.offsetParent;
                }
                cursor += obj.offsetLeft;
            } else if(axis == 'y') {
                cursor = Math.floor(obj.offsetHeight * pct); // multiply elem height by percentage of carets position for caret's offset in pixels
                while (obj.offsetParent) { // add all the offsets of all of its parents to get the complete offset of the caret from document origin
                    cursor += obj.offsetTop;
                    obj = obj.offsetParent;
                }
                cursor += obj.offsetTop;
            }

            return cursor;
        }

        function search(term) {
            var reactUrlToApplication = editor.fc_react_editor_url_to_application;
            if(reactUrlToApplication) {
                return reactSearch(reactUrlToApplication, term);
            }
            var deferred = new $.Deferred();
            if(typeof fc.mentions_result === 'undefined') {
                var url_to_application_custom = $('textarea').parents("form").find("input[name='url_to_application_custom']").val();
                var url = String.sprintf('/{0}/users', url_to_application_custom ? url_to_application_custom : url_to_application);
                ajaxRequest(url, {}, function(json) {
                    fc.mentions_result = json.data;
                    deferred.resolve(fuseSearch(json.data, term));
                });
            } else {
                deferred.resolve(fuseSearch(fc.mentions_result, term));
            }
            return deferred.promise();
        }
        
        // Cannot use usual search for React because url to application is editor specific, unlike in usual search where it's page based
        function reactSearch(urlToApplication, term) {
            var deferred = new $.Deferred();
            if(!window["react_mentions_cache"]) {
                window["react_mentions_cache"] = {};
            }
            var cachedResult = window["react_mentions_cache"][urlToApplication];
            if(cachedResult) {
                return deferred.resolve(fuseSearch(cachedResult, term));
            }
            var url = urlToApplication + "/users";
            ajaxRequest(url, {}, function(json) {
                window["react_mentions_cache"][urlToApplication] = json.data;
                deferred.resolve(fuseSearch(json.data, term));
            });
            return deferred.promise();
        }

        function fuseSearch(data, term) {
            var fuse = new Fuse(data, {
                threshold: 0.2,
                keys: [
                    "fullname",
                    "email"
                ]
            });
            return fuse.search(term);
        }

        function getPrevChar() {
            var range = editor.getSelection().getRanges()[0];
            var startNode = range.startContainer;
            var text;

            if(startNode.type == CKEDITOR.NODE_TEXT && range.startOffset) {
                text = startNode.$.textContent;
                text = text.replace(/\u200B/g,'').replace(/[^\u0000-\u007F]/g,' ').replace(/(\r\n|\n|\r)/g,'');
                return text[range.startOffset - 1];
            } else {
                range.collapse(true);
                range.setStartAt(editor.editable(), CKEDITOR.POSITION_AFTER_START);
                var walker = new CKEDITOR.dom.walker(range);
                var node = walker.previous();

                if(node && node.type == CKEDITOR.NODE_TEXT) {
                    text = node.$.textContent;
                    text = text.replace(/\u200B/g,'').replace(/[^\u0000-\u007F]/g,' ').replace(/(\r\n|\n|\r)/g,'');
                    return text[range.startOffset - 1];
                } else {
                    return '';
                }
            }
        }

        editor.on('selectionChange', function (event) {
            if($(editor.document.$).find('.fc_mention_temp').length) {
                var element = editor.document.findOne('.fc_mention_temp');
                $(element.$).removeClass('fc_mention_temp');
                element = element.getParent();
                var range = editor.createRange();
                range.setStartAfter(element );
                range.setEndAfter(element );
                editor.getSelection().selectRanges( [ range ] );
                editor.insertText( ' ' );

                var new_node = new CKEDITOR.dom.element('span');
                new_node.setText('');
                editor.insertElement(new_node);
                var new_range = editor.createRange();

                setTimeout(function () {
                    new_range.setStartAfter(new_node );
                    new_range.setEndAfter(new_node );
                    editor.getSelection().selectRanges( [ new_range ] );
                    $('body').click();
                }, 0)
            }
        });
        editor.on('key', function(event) {
            var pressedKeyCode = event.data.keyCode;
            var renderedChar = event.data.domEvent.$.key;
            var CTRL_Z = 1114202;
            var ARROW_UP = 38;
            var ARROW_DOWN = 40;
            var ENTER = 13;
            var TAB = 9;
            var ESCAPE = 27;
            var AT = 2228274;

            /* Ctrl+Z */
            if(pressedKeyCode == CTRL_Z) {
                if (editor.fc_mentions_forbid_undo) {
                    return false;
                }
                
                if ($(editor.document.$.activeElement).hasClass('mentions-username')) {
                    return false;
                }
            }

            /* Arrow Up / Down */
            if((pressedKeyCode == ARROW_UP || pressedKeyCode == ARROW_DOWN) && $(editor.document.$.activeElement).hasClass('mentions-username')) {
                var dropdown = $(editor.document.$.activeElement).next('ul.drpdwn'),
                focused = dropdown.find('.focused'),
                el = (pressedKeyCode == 38)?$(focused).prev():$(focused).next();
                if(el.length) {
                    focused.removeClass('focused');
                    el.addClass('focused');

                    dropdown.scrollTop(0);//set to top
                    dropdown.scrollTop(el.offset().top-dropdown.height());
                }
                return false;
            }

            /* Enter or Tab pressed */
            if((pressedKeyCode == ENTER || pressedKeyCode == TAB ) && $(editor.document.$.activeElement).hasClass('mentions-username')) {
                var user = $(editor.document.$.activeElement).next('ul.drpdwn:visible').find('.focused a').data('user');
                if(user) {
                    $(editor.document.$.activeElement).html('&#8203;');
                    $(editor.document.$.activeElement).next('ul.drpdwn').find('.focused a').mousedown();
                } else {
                    destroyWidget(editor, $(editor.document.$.activeElement).text());
                }
                event.cancel();
            }

            /* Escape */
            if(pressedKeyCode == ESCAPE && $(editor.document.$.activeElement).hasClass('mentions-username')) {
                destroyWidget(editor, $(editor.document.$.activeElement).text());
            }

            /* @ */
            if (renderedChar == '@') {
                editor.fire( 'lockSnapshot' );
                var selection = editor.getSelection();
                var last_char = getPrevChar();

                if(!last_char || !$.trim(last_char).length) {
                    var bookmarks = selection.createBookmarks(true);
                    editor.execCommand('mentions', {startupData: {'bookmark': bookmarks[0]}});
                }
            }
        });

    }

});